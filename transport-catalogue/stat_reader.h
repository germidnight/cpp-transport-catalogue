/* обработка запросов к базе и вывод данных
 * Формат запросов к базе данных.
 * Запросы к базе данных подаются в cin после запросов на создание базы. В первой строке вводится количество запросов, затем — по одному в строке — вводятся сами запросы.
 * 1) Bus X - Вывести информацию об автобусном маршруте X в следующем формате:
 * Bus X: R stops on route, U unique stops, L route length, C curvature
 * - X — название маршрута. Оно совпадает с названием, переданным в запрос Bus.
 * - R — количество остановок в маршруте автобуса от stop1 до stop1 включительно.
 * - U — количество уникальных остановок, на которых останавливается автобус. Одинаковыми считаются остановки, имеющие одинаковые названия.
 * - L — длина маршрута в метрах.
 * - С — извилистость, то есть отношение фактической длины маршрута к географическому расстоянию (как будто автобус
 * проезжает путь между двумя соседними остановками по кратчайшему расстоянию по земной поверхности).
 * Для вычисления географического расстояния между двумя точками пользуйтесь функцией ComputeDistance.
 * Длина маршрута вычисляется как сумма расстояний между остановками при движении по маршруту от начальной остановки до неё же самой:
 * - Для кольцевого маршрута A>B>C>A — сумма расстояний AB, BC, CA.
 * - Для некольцевого маршрута A-B-C — сумма расстояний AB, BC, CB, BA.
 * Величину расстояния, а также другие вещественные числа в последующих частях задачи, выводите с шестью значащими цифрами, то есть предваряя манипулятором setprecision(6).
 * Если маршрут X не найден, выведите: Bus X: not found
 * 2) Stop X (новый запрос) - вывести информацию об остановке X в следующем формате: Stop X: buses bus1 bus2 ... busN
 * - bus1 bus2 ... busN — список маршрутов, проходящих через остановку. Дубли не допускаются, названия должны быть отсортированы в алфавитном порядке.
 * - Если остановка X не найдена, выведите: "Stop X: not found".
 * - Если остановка X существует в базе, но через неё не проходит ни один маршрут, выведите: "Stop X: no buses".
 */
#pragma once

#include <iosfwd>
#include <string_view>

#include "transport_catalogue.h"

using namespace transport::catalogue;

namespace transport {
namespace stat_reader {

void ParseAndPrintStat(const TransportCatalogue &transport_catalogue, std::string_view request,
                       std::ostream &output);

void ProcessRequests2Catalogue(std::istream &input, std::ostream &output, int stat_request_count,
                                const TransportCatalogue &transport_catalogue);

} // конец namespace stat_reader
} // конец namespace transport